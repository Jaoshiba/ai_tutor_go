<!DOCTYPE html>
<html lang="en">
<head>

    <title>Python Back-End Development for Beginners</title>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <link rel="preload" as="style" href="/assets/built/screen.css?v=08cea6c63b" />
    <link rel="preload" as="script" href="/assets/built/casper.js?v=08cea6c63b" />

    <link rel="stylesheet" type="text/css" href="/assets/built/screen.css?v=08cea6c63b" />

    <link rel="canonical" href="https://blog.pjjop.org/back-end-programming/">
    <meta name="referrer" content="no-referrer-when-downgrade">
    <link rel="amphtml" href="https://blog.pjjop.org/back-end-programming/amp/">
    
    <meta property="og:site_name" content="PJJOP">
    <meta property="og:type" content="article">
    <meta property="og:title" content="Python Back-End Development for Beginners">
    <meta property="og:description" content="บทความโดย ผศ.ดร.ณัฐโชติ พรหมฤทธิ์
ภาควิชาคอมพิวเตอร์
คณะวิทยาศาสตร์
มหาวิทยาลัยศิลปากร

บทความนี้ผู้อ่านจะได้พัฒนา REST API สำหรับ User Service ด้วย Flask ซึ่งเป็น Web Framework ขนาดเล็กใน Python โดยมี API Endpoint ดังต่อไปนี้

 1. GET /api/v1/users
 2.">
    <meta property="og:url" content="https://blog.pjjop.org/back-end-programming/">
    <meta property="og:image" content="https://static.ghost.org/v1.0.0/images/blog-cover.jpg">
    <meta property="article:published_time" content="2024-11-09T05:47:43.000Z">
    <meta property="article:modified_time" content="2024-12-25T02:57:22.000Z">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Python Back-End Development for Beginners">
    <meta name="twitter:description" content="บทความโดย ผศ.ดร.ณัฐโชติ พรหมฤทธิ์
ภาควิชาคอมพิวเตอร์
คณะวิทยาศาสตร์
มหาวิทยาลัยศิลปากร

บทความนี้ผู้อ่านจะได้พัฒนา REST API สำหรับ User Service ด้วย Flask ซึ่งเป็น Web Framework ขนาดเล็กใน Python โดยมี API Endpoint ดังต่อไปนี้

 1. GET /api/v1/users
 2.">
    <meta name="twitter:url" content="https://blog.pjjop.org/back-end-programming/">
    <meta name="twitter:image" content="https://static.ghost.org/v1.0.0/images/blog-cover.jpg">
    <meta name="twitter:label1" content="Written by">
    <meta name="twitter:data1" content="Nuttachot Promrit">
    <meta property="og:image:width" content="2000">
    <meta property="og:image:height" content="666">
    
    <script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "Article",
    "publisher": {
        "@type": "Organization",
        "name": "PJJOP",
        "url": "https://blog.pjjop.org/",
        "logo": {
            "@type": "ImageObject",
            "url": "https://blog.pjjop.org/favicon.ico",
            "width": 48,
            "height": 48
        }
    },
    "author": {
        "@type": "Person",
        "name": "Nuttachot Promrit",
        "image": {
            "@type": "ImageObject",
            "url": "https://blog.pjjop.org/content/images/2023/08/IMG_8549-2.JPG",
            "width": 1382,
            "height": 1599
        },
        "url": "https://blog.pjjop.org/author/nuttachot/",
        "sameAs": []
    },
    "headline": "Python Back-End Development for Beginners",
    "url": "https://blog.pjjop.org/back-end-programming/",
    "datePublished": "2024-11-09T05:47:43.000Z",
    "dateModified": "2024-12-25T02:57:22.000Z",
    "description": "บทความโดย ผศ.ดร.ณัฐโชติ พรหมฤทธิ์\nภาควิชาคอมพิวเตอร์\nคณะวิทยาศาสตร์\nมหาวิทยาลัยศิลปากร\n\nบทความนี้ผู้อ่านจะได้พัฒนา REST API สำหรับ User Service ด้วย Flask ซึ่งเป็น Web Framework ขนาดเล็กใน Python โดยมี API Endpoint ดังต่อไปนี้\n\n 1. GET /api/v1/users\n 2. GET /api/v1/users/{user_id}\n 3. POST /api/v1/users\n 4. PUT /api/v1/users/{user_id}\n 5. DELETE /api/v1/users/{user_id}\n 6. GET /health\n\nเราจะใช้ HTTP Verb (Method) หลัก ๆ ได้แก่ GET, POST, PUT และ DELETE เพื่อกําหนดการดําเนินการที่เราสามารถทำได้กั",
    "mainEntityOfPage": "https://blog.pjjop.org/back-end-programming/"
}
    </script>

    <meta name="generator" content="Ghost 5.59">
    <link rel="alternate" type="application/rss+xml" title="PJJOP" href="https://blog.pjjop.org/rss/">
    
    <script defer src="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/sodo-search.min.js" data-key="c824bf6eb5a2fef16642e18d54" data-styles="https://cdn.jsdelivr.net/ghost/sodo-search@~1.1/umd/main.css" data-sodo-search="https://blog.pjjop.org/" crossorigin="anonymous"></script>
    
    <link href="https://blog.pjjop.org/webmentions/receive/" rel="webmention">
    <script defer src="/public/cards.min.js?v=08cea6c63b"></script>
    <link rel="stylesheet" type="text/css" href="/public/cards.min.css?v=08cea6c63b">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Q13G8E0YSX"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Q13G8E0YSX');
</script><style>:root {--ghost-accent-color: #FF1A75;}</style>

</head>
<body class="post-template is-head-left-logo has-cover">
<div class="viewport">

    <header id="gh-head" class="gh-head outer">
        <div class="gh-head-inner inner">
            <div class="gh-head-brand">
                <a class="gh-head-logo no-image" href="https://blog.pjjop.org">
                        PJJOP
                </a>
                <button class="gh-search gh-icon-btn" aria-label="Search this site" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
                <button class="gh-burger"></button>
            </div>

            <nav class="gh-head-menu">
                <ul class="nav">
    <li class="nav-home"><a href="https://blog.pjjop.org/">Home</a></li>
</ul>

            </nav>

            <div class="gh-head-actions">
                        <button class="gh-search gh-icon-btn" data-ghost-search><svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2" width="20" height="20"><path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg></button>
            </div>
        </div>
    </header>

    <div class="site-content">
        



<main id="site-main" class="site-main">
<article class="article post no-image ">

    <header class="article-header gh-canvas">

        <div class="article-tag post-card-tags">
        </div>

        <h1 class="article-title">Python Back-End Development for Beginners</h1>


        <div class="article-byline">
        <section class="article-byline-content">

            <ul class="author-list">
                <li class="author-list-item">
                    <a href="/author/nuttachot/" class="author-avatar">
                        <img class="author-profile-image" src="/content/images/size/w100/2023/08/IMG_8549-2.JPG" alt="Nuttachot Promrit" />
                    </a>
                </li>
            </ul>

            <div class="article-byline-meta">
                <h4 class="author-name"><a href="/author/nuttachot/">Nuttachot Promrit</a></h4>
                <div class="byline-meta-content">
                    <time class="byline-meta-date" datetime="2024-11-09">Nov 9, 2024</time>
                        <span class="byline-reading-time"><span class="bull">&bull;</span> 13 min read</span>
                </div>
            </div>

        </section>
        </div>


    </header>

    <section class="gh-content gh-canvas">
        <figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/python-2.png" class="kg-image" alt loading="lazy" width="2000" height="1381" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/python-2.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/python-2.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/python-2.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/python-2.png 2400w" sizes="(min-width: 720px) 720px"></figure><p><em><em>บทความโดย ผศ.ดร.ณัฐโชติ พรหมฤทธิ์</em></em><br><em><em><a href="https://www.cp.su.ac.th/?ref=blog.pjjop.org">ภาควิชาคอมพิวเตอร์</a></em></em><br><em><em>คณะวิทยาศาสตร์</em></em><br><em><em>มหาวิทยาลัยศิลปากร</em></em></p><p>บทความนี้ผู้อ่านจะได้พัฒนา REST API สำหรับ User Service ด้วย Flask ซึ่งเป็น Web Framework ขนาดเล็กใน Python โดยมี API Endpoint ดังต่อไปนี้</p><ol><li>GET /api/v1/users</li><li>GET /api/v1/users/{user_id}</li><li>POST /api/v1/users</li><li>PUT /api/v1/users/{user_id}</li><li>DELETE /api/v1/users/{user_id}</li><li>GET /health</li></ol><p>เราจะใช้ HTTP Verb (<strong><strong>Method</strong></strong>) หลัก ๆ ได้แก่ GET, POST, PUT และ DELETE เพื่อกําหนดการดําเนินการที่เราสามารถทำได้กับ Resource ของ User Service</p><p>โดย <strong><strong>GET</strong></strong> จะถูกใช้เพื่อดึง Resource และ <strong><strong>POST</strong></strong> จะถูกใช้สำหรับสร้าง Resource ใหม่ ส่วน <strong><strong>PUT</strong></strong> ถูกใช้สำหรับการ Update แบบแทนที่ และ <strong><strong>DELETE</strong></strong> สำหรับลบ Resource ที่มีอยู่</p><p>แต่ละ Endpoint มีรายละเอียดดังต่อไปนี้</p><p><strong>GET /api/v1/users</strong><br>- สำหรับดึงข้อมูลผู้ใช้ทั้งหมดจากฐานข้อมูล เรียงตาม id จากน้อยไปมาก<br>- ไม่ต้องส่ง Parameter<br>- ต้องมี Bearer Token ใน Header<br>- ส่งคืนข้อมูลเป็น Array ของผู้ใช้</p><pre><code># ดึงข้อมูลผู้ใช้ทั้งหมดจากฐานข้อมูล
# เรียงตาม id จากน้อยไปมาก
# query = "SELECT * FROM users ORDER BY id"

# ตัวอย่างผลลัพธ์
[
    {
        "id": 1,
        "name": "Nuttachot",
        "email": "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="58362d2c2c393b30372c183d35393134763b3735">[email&#160;protected]</a>"
    },
    {
        "id": 2,
        "name": "Poohkan",
        "email": "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b6c6d9d9deddd7d8f6d3dbd7dfda98d5d9db">[email&#160;protected]</a>"
    }
]</code></pre><p><strong>GET /api/v1/users/{user_id}</strong><br>- สำหรับดึงข้อมูลผู้ใช้ตาม ID ที่ระบุ<br>- ต้องระบุ user_id ที่ต้องการใน Path<br>- ต้องมี Bearer Token ใน Header<br>- ถ้าไม่พบผู้ใช้จะ Return 404</p><pre><code># ดึงข้อมูลผู้ใช้ตาม id ที่ระบุ
# query = "SELECT * FROM users WHERE id = %s"

# ตัวอย่างผลลัพธ์
{
    "id": 1,
    "name": "Nuttachot",
    "email": "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="177962636376747f786357727a767e7b3974787a">[email&#160;protected]</a>"
}</code></pre><p><strong>POST /api/v1/users</strong><br>- สำหรับสร้างผู้ใช้ใหม่จากข้อมูลที่ส่งมา<br>- ต้องส่งข้อมูล name และ email มาในรูปแบบ JSON<br>- ต้องมี Bearer Token ใน Header<br>- email ต้องไม่ซ้ำกับที่มีอยู่แล้ว<br>- ส่งคืนข้อมูลผู้ใช้ที่สร้างใหม่พร้อม ID</p><pre><code># สร้างผู้ใช้ใหม่จากข้อมูลที่ส่งมา

# ตัวอย่างข้อมูลที่ต้องส่ง
{
    "name": "Nuttachot",
    "email": "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="355b40414154565d5a41755058545c591b565a58">[email&#160;protected]</a>"
}

# ตัวอย่างผลลัพธ์
{
    "id": 1,  # ID จะถูกสร้างอัตโนมัติ
    "name": "Nuttachot",
    "email": "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="aec0dbdadacfcdc6c1daeecbc3cfc7c280cdc1c3">[email&#160;protected]</a>"
}</code></pre><p><strong>PUT /api/v1/users/{user_id}</strong><br>- สำหรับอัพเดทข้อมูลผู้ใช้ทั้งหมดตาม ID ที่ระบุ<br>- ต้องระบุ user_id ที่ต้องการแก้ไขใน Path<br>- ต้องส่งข้อมูลใหม่ทั้ง name และ email<br>- ต้องมี Bearer Token ใน header<br>- ถ้าไม่พบผู้ใช้จะ Return 404<br>- email ใหม่ต้องไม่ซ้ำกับคนอื่น<br>- ส่งคืนข้อมูลผู้ใช้ที่อัพเดทแล้ว</p><pre><code># อัพเดทข้อมูลผู้ใช้ตาม id ที่ระบุ

# ตัวอย่างข้อมูลที่ต้องส่ง
{
    "name": "Nuttachot Promrit",
    "email": "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1e706b6a6a7f7d76716a30707b695e7b737f7772307d7173">[email&#160;protected]</a>"
}

# ตัวอย่างผลลัพธ์
{
    "id": 1,
    "name": "Nuttachot Promrit",
    "email": "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b3ddc6c7c7d2d0dbdcc79dddd6c4f3d6ded2dadf9dd0dcde">[email&#160;protected]</a>"
}</code></pre><p><strong>DELETE /api/v1/users/{user_id}</strong><br>- สำหรับลบผู้ใช้ตาม ID ที่ระบุ<br>- ต้องระบุ user_id ที่ต้องการลบใน Path<br>- ต้องมี Bearer Token ใน Header<br>- ถ้าไม่พบผู้ใช้จะ Return 404<br>- ส่งคืนข้อความยืนยันการลบสำเร็จ</p><pre><code># ลบผู้ใช้ตาม ID ที่ระบุ

# ตัวอย่างผลลัพธ์
{
    "message": "User deleted successfully"
}</code></pre><p><strong>GET /health</strong><br>- สำหรับตรวจสอบการเชื่อมต่อกับฐานข้อมูล<br>- ไม่ต้องใช้ Bearer Token</p><pre><code># ตรวจสอบการเชื่อมต่อกับฐานข้อมูล

# ตัวอย่างผลลัพธ์ (กรณีปกติ)
{
    "status": "healthy",
    "database": "connected"
}

# ตัวอย่างผลลัพธ์ (กรณีมีปัญหา)
{
    "detail": "Database connection failed: error message"
}</code></pre><p>Project นี้จะมีการพัฒนาบน <a href="https://github.com/codespaces?ref=blog.pjjop.org">Github Codespaces</a> และ VS Code Editor ซึ่งเป็น Linux-based Environment สำหรับนักพัฒนาที่ง่ายในการทดลอง Deploy API และ Database Server บน Docker Container โดยจะมีการสร้าง Git Repository 3 Repo บน Github ได้แก่</p><ol><li>userservice Repo สำหรับเก็บ Codebase ของ REST API</li><li>userdatabase Repo สำหรับเก็บ Codebase ของการ Config PostgreSQL</li><li>backend Repo สำหรับการสร้าง Codespace</li></ol><p>นอกจากนี้ยังมีรูปแบบในการจัดการ Branch ใน Git ที่มีลักษณะการพัฒนา Code แบบรวมศูนย์บน Branch หลัก (main Branch) ที่เรียกว่า <strong>Trunk-Based Development </strong>ซึ่งหลาย ๆ บริษัท เช่น Google, Facebook, Netflix และ Amazon นำมาปรับใช้เพื่อให้สามารถพัฒนาและ Deploy Codeใหม่ ๆ ได้อย่างต่อเนื่องและรวดเร็ว</p><p>โดยนักพัฒนาทุกคนในทีมจะทำงานและ Merge Code เข้ามายัง Trunk โดยตรงอย่างสม่ำเสมอ ซึ่งต่างจาก Git flow ทั่วไปที่อาจมี Branch หลายระดับ เช่น main, develop หรือ feature Branch</p><p>ดังนั้นบนความนี้ไม่ใช่มีเนื้อหาเฉพาะการพัฒนา REST API เท่านั้น แต่ยังแสดงตัวอย่าง Workflow ของการพัฒนา Software แบบสมัยใหม่ที่เน้นการทำงานร่วมกันเป็นทีมด้วยแนวทางแบบ Trunk-Based Development ซึ่งผู้พัฒนาจะได้ใช้ VS Code ร่วมกับ Github Codespaces ในการทดสอบการ Deploy Software บน Linux-based Environment ก่อนนำขึ้น Production ต่อไป</p><h2 id="%E0%B8%AA%E0%B8%A3%E0%B9%89%E0%B8%B2%E0%B8%87-github-codespaces"><strong>สร้าง Github Codespaces</strong></h2><p>Codespaces เป็น Platform ที่ให้บริการนักพัฒนา Software ในรูปแบบของ Cloud-based จาก GitHub โดยเราสามารถสร้าง Environment ที่มีเครื่องมือและ Resource พร้อมใช้งานสำหรับการพัฒนา Software ได้อย่างรวดเร็ว นักพัฒนาสามารถสร้าง Codespace ที่เป็น Linux-based OS และเครื่องมือต่าง ๆ เช่น Git, Docker และ Python เป็นต้น</p><ul><li>ไปยัง <a href="https://github.com/?ref=blog.pjjop.org">github.com</a> แล้ว Login</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-10.53.14.png" class="kg-image" alt loading="lazy" width="2000" height="370" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-08-at-10.53.14.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-08-at-10.53.14.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-08-at-10.53.14.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-10.53.14.png 2216w" sizes="(min-width: 720px) 720px"></figure><ul><li>กด New เพื่อสร้าง Repository ตั้งชื่อเป็น <strong>backend</strong> เลือกชนิด Repo แบบ Private และเลือก Add a README file แล้วกด Create repository</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.11.35.png" class="kg-image" alt loading="lazy" width="1948" height="2328" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-08-at-11.11.35.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-08-at-11.11.35.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-08-at-11.11.35.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.11.35.png 1948w" sizes="(min-width: 720px) 720px"></figure><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.12.56.png" class="kg-image" alt loading="lazy" width="1948" height="2328" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-08-at-11.12.56.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-08-at-11.12.56.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-08-at-11.12.56.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.12.56.png 1948w" sizes="(min-width: 720px) 720px"></figure><ul><li>เลือกเมนู Codespace</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.08.21.png" class="kg-image" alt loading="lazy" width="2000" height="679" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-08-at-11.08.21.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-08-at-11.08.21.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-08-at-11.08.21.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.08.21.png 2214w" sizes="(min-width: 720px) 720px"></figure><ul><li>กด New Codespace</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.09.06.png" class="kg-image" alt loading="lazy" width="2000" height="334" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-08-at-11.09.06.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-08-at-11.09.06.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-08-at-11.09.06.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.09.06.png 2202w" sizes="(min-width: 720px) 720px"></figure><ul><li>ที่หน้าสร้าง Codespace เลือก Repository เป็น backend จากที่สร้างไว้ แล้วเลือก Region และ Machine type ตามที่ต้องการ แล้วกด Create codespace</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.15.12.png" class="kg-image" alt loading="lazy" width="1948" height="2328" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-08-at-11.15.12.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-08-at-11.15.12.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-08-at-11.15.12.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.15.12.png 1948w" sizes="(min-width: 720px) 720px"></figure><ul><li>Codespace จะเปิด VS Code บน Browser ให้ทำงาน ดู Version ของ OS ด้วยคำสั่งต่อไปนี้</li></ul><pre><code>cat /etc/os-release</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.20.46.png" class="kg-image" alt loading="lazy" width="2000" height="1274" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-08-at-11.20.46.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-08-at-11.20.46.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-08-at-11.20.46.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-08-at-11.20.46.png 2400w" sizes="(min-width: 720px) 720px"></figure><p>เพื่อการใช้งาน Codespace และทดสอบ Code ที่ Seamless ขึ้น เหมือนการจำลอง Environment dev มาไว้บน Localhost เราจะรัน VS Code จากเครื่องเราเองโดยไม่ใช้ Browser แต่ก่อนอื่นให้ปิดหน้าต่าง VS Code บน Browser ก่อน ป้องกันการลืมปิด ซึ่ง Github จะนับจำนวนชั่วโมงการให้ Resource เราตาม Quota ที่มี (มีทั้งแบบ Free Plan และ GitHub Pro)</p><ul><li>ไปที่เมนู Codespace อีกครั้ง แล้วกดที่ปุ่ม 3 จุด</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.30.47.png" class="kg-image" alt loading="lazy" width="1894" height="1204" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-08-at-11.30.47.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-08-at-11.30.47.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-08-at-11.30.47.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.30.47.png 1894w" sizes="(min-width: 720px) 720px"></figure><ul><li>เลือก Open in Visual Studio Code</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.32.07.png" class="kg-image" alt loading="lazy" width="540" height="746"></figure><ul><li>กด Allow</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.33.19.png" class="kg-image" alt loading="lazy" width="1612" height="1654" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-08-at-11.33.19.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-08-at-11.33.19.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-08-at-11.33.19.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.33.19.png 1612w" sizes="(min-width: 720px) 720px"></figure><ul><li>เลือก Open</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.34.19.png" class="kg-image" alt loading="lazy" width="2000" height="1549" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-08-at-11.34.19.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-08-at-11.34.19.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-08-at-11.34.19.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.34.19.png 2272w" sizes="(min-width: 720px) 720px"></figure><ul><li>ดู Version ของ Git และ Docker ด้วยคำสั่งต่อไปนี้</li></ul><pre><code>git version

docker version</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.36.40.png" class="kg-image" alt loading="lazy" width="2000" height="1968" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-08-at-11.36.40.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-08-at-11.36.40.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-08-at-11.36.40.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.36.40.png 2388w" sizes="(min-width: 720px) 720px"></figure><h2 id="config-postgresql-%E0%B9%81%E0%B8%A5%E0%B8%B0-deploy-%E0%B8%9A%E0%B8%99-docker-container"><strong>Config PostgreSQL และ Deploy บน Docker Container</strong></h2><p>เราจะใช้แนวทางในการพัฒนา Software แบบ Trunk-Based Development (TBD) ซึ่งมีหลักการสำคัญ คือ</p><ul><li><strong>การ Commit และ Merge บ่อย ๆ</strong> นักพัฒนาจะ Commit และ Merge การเปลี่ยนแปลงของตัวเองเข้ากับ Trunk (Branch หลัก) บ่อยครั้ง อาจจะเป็นรายวันหรือบ่อยกว่านั้น การรวม Code บ่อย ๆ ช่วยให้ทีมทำงานร่วมกันได้อย่างคล่องตัวและลดโอกาสการเกิด Merge Conflicts ขนาดใหญ่</li><li><strong>ขนาดงานที่เล็กและแตก Branch สั้น ๆ</strong> ใน TBD งานแต่ละชิ้นควรจะเล็กพอที่จะทำเสร็จได้ภายในระยะสั้น ๆ นักพัฒนาอาจแตก Branch ย่อยขึ้นมาเพื่อทำงานในบางงาน แต่ Branch ย่อยนั้นควรจะใช้เวลาไม่นานก่อนจะ Merge กลับไปยัง Trunk ไม่มี Branch ระยะยาว</li></ul><p>โดยเราจะสร้าง userdatabase Repo สำหรับเก็บ Codebase ของการ Config PostgreSQL ที่มีโครงสร้าง Project ดังต่อไปนี้</p><pre><code>.
├── README.md
├── backup
│   ├── Dockerfile
│   └── backup.sh
├── backups
├── docker
│   ├── Dockerfile
│   └── init.sql
├── .env
├── .gitignore
└── docker-compose.yml</code></pre><ul><li>สร้าง Folder <strong>userdatabase</strong> เข้าไปใน Folder นี้แล้วเริ่มต้นใช้งาน Git ด้วยคำสั่งต่อไปนี้</li></ul><pre><code>git init</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.59.35.png" class="kg-image" alt loading="lazy" width="2000" height="1726" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-08-at-11.59.35.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-08-at-11.59.35.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-08-at-11.59.35.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-08-at-11.59.35.png 2234w" sizes="(min-width: 720px) 720px"></figure><ul><li>ไปที่ Github.com สร้าง Git Repo ชื่อ <strong>userdatabase</strong> เลือกชนิด Repo แบบ Private แล้วกด Create repository</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-06.57.23.png" class="kg-image" alt loading="lazy" width="2000" height="2167" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-06.57.23.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-06.57.23.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-06.57.23.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-06.57.23.png 2084w" sizes="(min-width: 720px) 720px"></figure><ul><li> เลือก SSH แล้วกด Copy URL</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-06.58.17.png" class="kg-image" alt loading="lazy" width="2000" height="2167" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-06.58.17.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-06.58.17.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-06.58.17.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-06.58.17.png 2084w" sizes="(min-width: 720px) 720px"></figure><ul><li>เชื่อมต่อ Codespace กับ Git Repo ด้วยคำสั่ง git remote add origin ตามด้วย URL ที่ได้ Copy มา เช่น</li></ul><pre><code>git remote add origin <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="73141a0733141a071b06115d101c1e">[email&#160;protected]</a>:promritn/userdatabase.git</code></pre><ul><li>สร้าง SSH Key บน Codespace สำหรับการ Push และ Pull Code กับ Git Repo ที่ได้เชื่อมต่อ โดยไม่ต้องป้อน Username และ Password ทุกครั้ง</li></ul><pre><code>สร้าง ssh-keygen
ssh-keygen -t ed25519 -C "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="51283e24230e343c30383d113429303c213d347f323e3c">[email&#160;protected]</a>"

แสดง public key บน Linux
cat ~/.ssh/id_ed25519.pub</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2024-11-08-at-1.23.28-PM.png" class="kg-image" alt loading="lazy" width="2000" height="1335" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2024-11-08-at-1.23.28-PM.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2024-11-08-at-1.23.28-PM.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2024-11-08-at-1.23.28-PM.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2024-11-08-at-1.23.28-PM.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>ใช้คำสั่ง cat ~/.ssh/id_ed25519.pub เพื่อแสดง Public Key ดังเช่นตัวอย่างต่อไปนี้แล้ว Copy ไว้</li></ul><pre><code>ssh-ed25519 ABCAC3NzaC1lZFI1NTE3AAAAIMmPOcXyJu+c/2Ork3pmgBU9FBl1iwxBr97Bh1MxI6sB <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bed0cbcacadfddd6d1cafed6d1cad3dfd7d290ddd1d3">[email&#160;protected]</a></code></pre><ul><li>นำ Public Key ไปเพิ่มบน Github Repo โดยไปที่รูป Profile เลือก Your organizations เลือกเมนู SSH and GPG keys แล้วกด New SSH key</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2024-11-10-at-9.52.51-AM.png" class="kg-image" alt loading="lazy" width="630" height="1358" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2024-11-10-at-9.52.51-AM.png 600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2024-11-10-at-9.52.51-AM.png 630w"></figure><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-07.27.03.png" class="kg-image" alt loading="lazy" width="2000" height="2167" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-07.27.03.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-07.27.03.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-07.27.03.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-07.27.03.png 2084w" sizes="(min-width: 720px) 720px"></figure><ul><li>ตั้งชื่อ userdatabase และนำ Public key ที่ Copy ไปวาง แล้วกด Add SSH key</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2024-11-08-at-1.33.40-PM.png" class="kg-image" alt loading="lazy" width="1818" height="1804" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2024-11-08-at-1.33.40-PM.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2024-11-08-at-1.33.40-PM.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2024-11-08-at-1.33.40-PM.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2024-11-08-at-1.33.40-PM.png 1818w" sizes="(min-width: 720px) 720px"></figure><ul><li>ยืนยันตัวตน</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2024-11-08-at-1.35.45-PM.png" class="kg-image" alt loading="lazy" width="1818" height="1804" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2024-11-08-at-1.35.45-PM.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2024-11-08-at-1.35.45-PM.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2024-11-08-at-1.35.45-PM.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2024-11-08-at-1.35.45-PM.png 1818w" sizes="(min-width: 720px) 720px"></figure><ul><li>กลับมาที่ Codespace สร้างไฟล์ README.md ใน Folder userdatabase</li></ul><pre><code>  touch README.md</code></pre><ul><li>พิมพ์หัวข้อ PostgreSQL config แบบหัวเรื่องระดับ 1 ในไฟล์ README.md ด้วย Tag ของ Markdown แล้ว Save</li></ul><pre><code># PostgreSQL config
</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-07.41.53.png" class="kg-image" alt loading="lazy" width="2000" height="1476" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-07.41.53.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-07.41.53.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-07.41.53.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-07.41.53.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>Commit เข้า Git ด้วยคำสั่งต่อไปนี้</li></ul><pre><code>git add .

git commit -m 'first commit'</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-07.45.58.png" class="kg-image" alt loading="lazy" width="1730" height="478" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-07.45.58.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-07.45.58.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-07.45.58.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-07.45.58.png 1730w" sizes="(min-width: 720px) 720px"></figure><ul><li>Push Code ที่ Commit ขึ้น Github Server</li></ul><pre><code>git push origin main</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-07.48.13.png" class="kg-image" alt loading="lazy" width="1722" height="438" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-07.48.13.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-07.48.13.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-07.48.13.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-07.48.13.png 1722w" sizes="(min-width: 720px) 720px"></figure><ul><li>ไปที่ Browser แล้ว Refresh หน้าต่าง userdatabase Repo จะเห็นหัวข้อ PostgreSQL config แบบตัวใหญ่</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-07.48.55.png" class="kg-image" alt loading="lazy" width="2000" height="2167" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-07.48.55.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-07.48.55.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-07.48.55.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-07.48.55.png 2084w" sizes="(min-width: 720px) 720px"></figure><p>เราจะ Config PostgreSQL บน Branch ย่อย ซึ่งตามหลักการของ Trunk-Based Developmen แล้วนักพัฒนาควรจะสร้าง Branch ย่อยเฉพาะงานของตัวเอง (Short-Lived Branch) จาก Trunk ซึ่งงานควรมีขนาดเล็กและสามารถทำให้เสร็จได้ภายในเวลาอันสั้น (ไม่เกิน 1 วัน) เพื่อให้ง่ายต่อการ Merge กลับไปยัง Trunk อย่างรวดเร็ว</p><ul><li>สร้าง Short-Lived Branch ชื่อ feature/config-postgresql</li></ul><pre><code>git checkout -b feature/config-postgresql
</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-08.03.04.png" class="kg-image" alt loading="lazy" width="1718" height="358" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-08.03.04.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-08.03.04.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-08.03.04.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-08.03.04.png 1718w" sizes="(min-width: 720px) 720px"></figure><ul><li>สร้างไฟล์และ Folder ของ Project ตามโครงสร้างดังต่อไปนี้</li></ul><pre><code>.
├── README.md
├── backup
│   ├── Dockerfile
│   └── backup.sh
├── backups
├── docker
│   ├── Dockerfile
│   └── init.sql
├── .env
├── .gitignore
└── docker-compose.yml</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-09.19.32.png" class="kg-image" alt loading="lazy" width="2000" height="1648" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-09.19.32.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-09.19.32.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-09.19.32.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-09.19.32.png 2318w" sizes="(min-width: 720px) 720px"></figure><ul><li>แก้ไขไฟล์ docker-compose.yml สำหรับการ Deploy PosgreSQL, PGAdmin และ Backup Container</li></ul><figure class="kg-card kg-code-card"><pre><code># docker-compose.yml

services:
  db:
    build: ./docker
    container_name: user_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups  # volume สำหรับเก็บไฟล์ backup
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - database_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4
    container_name: user_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT}:80"
    networks:
      - database_network
    restart: unless-stopped
    depends_on:
      - db

  backup:
    build: ./backup
    container_name: postgres_backup
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: db
      BACKUP_RETENTION_DAYS: 7  # เก็บ backup ไว้ 7 วัน
      BACKUP_SCHEDULE: "0 0 * * *"  # ทำ backup ทุกวันเวลาเที่ยงคืน
    volumes:
      - ./backups:/backups
    networks:
      - database_network
    depends_on:
      - db

networks:
  database_network:
    name: database_network
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:</code></pre><figcaption>docker-compose.yml</figcaption></figure><ul><li>แก้ไขไฟล์ .env</li></ul><figure class="kg-card kg-code-card"><pre><code># .env
POSTGRES_DB=postgres
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres123
POSTGRES_PORT=5432
<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3c6c7b7d787175726378797a7d6970686379717d7570015d585155527c5d58515552125f5351">[email&#160;protected]</a>
PGADMIN_DEFAULT_PASSWORD=admin123
PGADMIN_PORT=5050</code></pre><figcaption>.env</figcaption></figure><ul><li>แก้ไขไฟล์ .gitignore</li></ul><figure class="kg-card kg-code-card"><pre><code># .gitignore
.env

# Ignore backup files
/backups/
*.backup
*.backup.gz
*.dump
*.sql
*.gz</code></pre><figcaption>.gitignore</figcaption></figure><ul><li>แก้ไขไฟล์ Dockerfile ใน Folder docker</li></ul><figure class="kg-card kg-code-card"><pre><code># Dockerfile
FROM postgres:17-alpine

# Copy initialization scripts
COPY init.sql /docker-entrypoint-initdb.d/

# Set locale (optional)
ENV LANG en_US.utf8</code></pre><figcaption>docker/Dockerfile</figcaption></figure><ul><li>แก้ไขไฟล์ init.sql ใน Folder docker</li></ul><figure class="kg-card kg-code-card"><pre><code>-- สร้างตาราง users
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- สร้าง function สำหรับอัพเดท updated_at โดยอัตโนมัติ
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- สร้าง trigger สำหรับอัพเดท updated_at
CREATE TRIGGER update_users_modtime
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION update_modified_column();

-- สร้าง indexes เพื่อเพิ่มประสิทธิภาพ
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_name ON users(name);

-- เพิ่มข้อมูลตัวอย่าง
INSERT INTO users (name, email) VALUES 
    ('ณัฐโชติ พรหมฤทธิ์', '<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="721c07060613111a1d0632170a131f021e175c111d1f">[email&#160;protected]</a>'),
    ('สัจจาภรณ์ ไวจรรยา', '<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ea998b80808b9a859884aa8f928b879a868fc4898587">[email&#160;protected]</a>'),
    ('สมศรี มีสุข', '<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="33405c5e40415a73564b525e435f561d505c5e">[email&#160;protected]</a>');</code></pre><figcaption>docker/init.sql</figcaption></figure><ul><li>แก้ไขไฟล์ Dockerfile ใน Folder backup</li></ul><figure class="kg-card kg-code-card"><pre><code># backup/Dockerfile
FROM postgres:17-alpine

# ติดตั้ง dependencies ที่จำเป็น
RUN apk add --no-cache \
    bash \
    curl \
    pigz \
    tar \
    dcron \
    tzdata

# Copy backup script
COPY backup.sh /backup.sh
RUN chmod +x /backup.sh

# สร้าง directory สำหรับ log
RUN mkdir -p /var/log/cron &amp;&amp; \
    touch /var/log/cron/cron.log &amp;&amp; \
    chmod 0644 /var/log/cron/cron.log

# Create a script to setup and run cron
RUN echo '#!/bin/sh' &gt; /entrypoint.sh &amp;&amp; \
    echo 'printenv | grep -v "no_proxy" &gt;&gt; /etc/environment' &gt;&gt; /entrypoint.sh &amp;&amp; \
    echo 'crond -f -d 8 &gt;&gt; /var/log/cron/cron.log 2&gt;&amp;1' &gt;&gt; /entrypoint.sh &amp;&amp; \
    chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]</code></pre><figcaption>backup/Dockerfile</figcaption></figure><ul><li>แก้ไขไฟล์ backup.sh ใน Folder backup</li></ul><pre><code>#!/bin/bash
# backup/backup.sh

# กำหนดตัวแปร
BACKUP_DIR="/backups"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_FILE="backup_${TIMESTAMP}"

# สร้างโฟลเดอร์ backup ถ้ายังไม่มี
mkdir -p ${BACKUP_DIR}

# ทำ Database Backup
echo "Starting backup of PostgreSQL database: ${POSTGRES_DB}"
PGPASSWORD=${POSTGRES_PASSWORD} pg_dump -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -d ${POSTGRES_DB} -F c -b -v -f "${BACKUP_DIR}/${BACKUP_FILE}.backup"

# บีบอัดไฟล์ backup
echo "Compressing backup file..."
pigz "${BACKUP_DIR}/${BACKUP_FILE}.backup"

# ลบไฟล์ backup เก่า
echo "Removing old backups..."
find ${BACKUP_DIR} -type f -name "*.backup.gz" -mtime +${BACKUP_RETENTION_DAYS} -delete

# ตรวจสอบสถานะการทำงาน
if [ $? -eq 0 ]; then
    echo "Backup completed successfully: ${BACKUP_FILE}.backup.gz"
else
    echo "Backup failed!"
    exit 1
fi

# สร้าง symlink ไปยัง backup ล่าสุด
ln -sf "${BACKUP_DIR}/${BACKUP_FILE}.backup.gz" "${BACKUP_DIR}/latest.backup.gz"</code></pre><p>ก่อน Commit Code เข้า Git นักพัฒนาต้องทดสอบก่อนว่ามันทำงานได้</p><ul><li>Deploy PostgreSQL, PGAdmin และ Backup Container</li></ul><pre><code>docker-compose up -d</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-09.52.09.png" class="kg-image" alt loading="lazy" width="2000" height="1434" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-09.52.09.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-09.52.09.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-09.52.09.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-09.52.09.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>ตรวจสอบ Container ที่ Deploy</li></ul><pre><code>docker-compose ps</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-09.52.49.png" class="kg-image" alt loading="lazy" width="2000" height="134" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-09.52.49.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-09.52.49.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-09.52.49.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-09.52.49.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>ดู Logs ของ 3 Container ที่รัน</li></ul><pre><code>docker-compose logs</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-09.54.45.png" class="kg-image" alt loading="lazy" width="2000" height="1391" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-09.54.45.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-09.54.45.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-09.54.45.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-09.54.45.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>ทดลอง Backup Database</li></ul><pre><code>docker exec postgres_backup /backup.sh</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-09.59.23.png" class="kg-image" alt loading="lazy" width="2000" height="1663" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-09.59.23.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-09.59.23.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-09.59.23.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-09.59.23.png 2336w" sizes="(min-width: 720px) 720px"></figure><ul><li>สำหรับการ Restore เราจะใช้คำสั่งดังต่อไปนี้</li></ul><pre><code># Latest backup
docker exec -it user_postgres pg_restore -U [user] -d [dbname] -v /backups/latest.backup.gz

# Specific backup
docker exec -it user_postgres pg_restore -U [user] -d [dbname] -v /backups/backup_[timestamp].backup.gz</code></pre><p>ทดลอง Query ข้อมูลผ่าน PG Admin ดังนี้</p><ul><li>ไปยัง  URL <a href="http://localhost:5050/?ref=blog.pjjop.org">http://localhost:5050</a> ใส่ Username และ Password ตามที่ได้กำหนดไว้ในไฟล์ .env </li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.04.13.png" class="kg-image" alt loading="lazy" width="2000" height="2167" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-10.04.13.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-10.04.13.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-10.04.13.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.04.13.png 2084w" sizes="(min-width: 720px) 720px"></figure><ul><li>กด Add New Server</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.06.47.png" class="kg-image" alt loading="lazy" width="2000" height="1583" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-10.06.47.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-10.06.47.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-10.06.47.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-10.06.47.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>ตั้งชื่อ Connection</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.07.27.png" class="kg-image" alt loading="lazy" width="2000" height="1583" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-10.07.27.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-10.07.27.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-10.07.27.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-10.07.27.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>กำหนดค่า Connection ต่างๆ</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.10.14.png" class="kg-image" alt loading="lazy" width="2000" height="1583" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-10.10.14.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-10.10.14.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-10.10.14.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-10.10.14.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>คลิ๊กขวาที่ postgres เลือก Query Tool</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.11.04.png" class="kg-image" alt loading="lazy" width="2000" height="1583" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-10.11.04.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-10.11.04.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-10.11.04.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-10.11.04.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>ทดสอบ Query ข้อมูลใน Table users ด้วยคำสั่งต่อไปนี้ แล้วกดปุ่ม Play</li></ul><pre><code>select * from users</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.12.34.png" class="kg-image" alt loading="lazy" width="2000" height="1345" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-10.12.34.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-10.12.34.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-10.12.34.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-10.12.34.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>เมื่อทดสอบการ Deploy, Backup Database และ Query ข้อมูลแล้วจึง Commit Code เข้า Git ด้วยคำสั่งต่อไปนี้</li></ul><pre><code>git add .

git commit -m 'config postgresql, backup container and pgadmin'</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.17.26.png" class="kg-image" alt loading="lazy" width="2000" height="305" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-10.17.26.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-10.17.26.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-10.17.26.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.17.26.png 2372w" sizes="(min-width: 720px) 720px"></figure><ul><li>ดู History ที่ Commit</li></ul><pre><code>git log --oneline</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.22.22.png" class="kg-image" alt loading="lazy" width="1976" height="220" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-10.22.22.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-10.22.22.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-10.22.22.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.22.22.png 1976w" sizes="(min-width: 720px) 720px"></figure><p>Rebase โดยนำโค้ดใน branch ของเรามาอัปเดตให้ตรงกับ Trunk ล่าสุด </p><ul><li>แต่ก่อน Rebase ควรดึงการเปลี่ยนแปลงล่าสุดจาก Trunk เพื่อให้แน่ใจว่า Branch ของเราอยู่ในสถานะล่าสุด เหมือนบน Github Server</li></ul><pre><code>git checkout main

git pull origin main</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.28.13.png" class="kg-image" alt loading="lazy" width="1972" height="262" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-10.28.13.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-10.28.13.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-10.28.13.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.28.13.png 1972w" sizes="(min-width: 720px) 720px"></figure><ul><li>Rebase เพื่อนำโค้ดใน Branch ของเรามา Update ให้ตรงกับ Trunk ล่าสุด</li></ul><pre><code>git checkout feature/config-postgresql

git rebase main</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.33.04.png" class="kg-image" alt loading="lazy" width="1970" height="258" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-10.33.04.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-10.33.04.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-10.33.04.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.33.04.png 1970w" sizes="(min-width: 720px) 720px"></figure><ul><li>เมื่อ Code ใน Branch feature/config-postgresql ตรงกับ Trank ล่าสุดแล้ว จึง Merge กลับไปยัง Trunk (ถ้ามี Conflict ตอน Rebase ให้แก้ไข Conflict ก่อน Merge)</li></ul><pre><code>git checkout main

git merge feature/config-postgresql
</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.38.10.png" class="kg-image" alt loading="lazy" width="1970" height="538" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-10.38.10.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-10.38.10.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-10.38.10.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.38.10.png 1970w" sizes="(min-width: 720px) 720px"></figure><p>*อาจ Push Branch feature/config-postgresql ขึ้น Github Server เพื่อเปิด Pull Request (PR) ให้ทีมตรวจสอบก่อนก็ได้</p><p>**ขั้นตอนการแก้ไข Conflict หลังจาก Rebase</p><pre><code>1. ดูไฟล์ที่เกิด Conflict
2. เปิดไฟล์ที่มี Conflict และแก้ไขความขัดแย้ง
3. บันทึกไฟล์ที่แก้ไขแล้ว
4. ใช้ git add กับไฟล์ที่แก้ไข
5. ใช้ git rebase --continue เพื่อดำเนินการ Rebase ต่อ
6. หากยังมี Conflict ให้ทำซ้ำขั้นตอนจนกว่าจะเสร็จสิ้น

ยกเลิกการ Rebase (ถ้าจำเป็น)
git rebase --abort

</code></pre><ul><li>Push Code ขึ้น Github Server</li></ul><pre><code>git push origin main</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.41.04.png" class="kg-image" alt loading="lazy" width="1970" height="364" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-10.41.04.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-10.41.04.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-10.41.04.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.41.04.png 1970w" sizes="(min-width: 720px) 720px"></figure><ul><li>ลบ Branch ย่อยที่เสร็จแล้ว</li></ul><pre><code>git branch -d feature/config-postgresql
</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.43.22.png" class="kg-image" alt loading="lazy" width="1976" height="184" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-10.43.22.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-10.43.22.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-10.43.22.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.43.22.png 1976w" sizes="(min-width: 720px) 720px"></figure><ul><li>ดู History ทั้งหมด</li></ul><pre><code>git log --oneline</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.54.01.png" class="kg-image" alt loading="lazy" width="1978" height="204" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-10.54.01.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-10.54.01.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-10.54.01.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-10.54.01.png 1978w" sizes="(min-width: 720px) 720px"></figure><p>Trunk ของเราจะมี History เป็นเส้นตรงสวยงาม</p><h2 id="%E0%B8%9E%E0%B8%B1%E0%B8%92%E0%B8%99%E0%B8%B2-api-%E0%B9%80%E0%B8%8A%E0%B8%B7%E0%B9%88%E0%B8%AD%E0%B8%A1%E0%B8%95%E0%B9%88%E0%B8%AD%E0%B8%81%E0%B8%B1%E0%B8%9A-postgresql-%E0%B9%81%E0%B8%A5%E0%B8%B0-deploy-%E0%B8%9A%E0%B8%99-docker-container"><strong><strong>พัฒนา API<strong> </strong>เชื่อมต่อกับ PostgreSQL <strong>และ Deploy บน Docker Container</strong></strong></strong></h2><p>เราจะสร้าง userservice Repo สำหรับเก็บ Codebase ของ REST API โดยมีโครงสร้างของ Project ดังต่อไปนี้</p><pre><code>.
├── .env
├── .gitignore
├── Dockerfile
├── README.md
├── docker-compose.yml
├── main.py
└── requirements.txt</code></pre><ul><li>สร้าง Folder <strong><strong>user</strong>service</strong> เข้าไปใน Folder นี้แล้วเริ่มต้นใช้งาน Git ด้วยคำสั่งต่อไปนี้</li></ul><pre><code>git init</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.05.46.png" class="kg-image" alt loading="lazy" width="1682" height="262" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-11.05.46.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-11.05.46.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-11.05.46.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.05.46.png 1682w" sizes="(min-width: 720px) 720px"></figure><ul><li>ไปที่ <a href="https://github.com/?ref=blog.pjjop.org">Github.com</a> สร้าง Git Repo ชื่อ <strong><strong>user</strong>service</strong> เลือกชนิด Repo แบบ Private แล้วกด Create repository</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.07.14.png" class="kg-image" alt loading="lazy" width="2000" height="2225" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-11.07.14.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-11.07.14.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-11.07.14.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.07.14.png 2084w" sizes="(min-width: 720px) 720px"></figure><ul><li>เลือก SSH แล้วกด Copy URL</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.08.21.png" class="kg-image" alt loading="lazy" width="2000" height="2225" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-11.08.21.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-11.08.21.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-11.08.21.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.08.21.png 2084w" sizes="(min-width: 720px) 720px"></figure><ul><li>เชื่อมต่อ Codespace กับ Git Repo ด้วยคำสั่ง git remote add origin ตามด้วย URL ที่ได้ Copy มา เช่น</li></ul><pre><code>git remote add origin <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="61060815210608150914034f020e0c">[email&#160;protected]</a>:promritn/userservice.git</code></pre><ul><li>สร้างไฟล์ README.md ใน Folder userservice</li></ul><pre><code>touch README.md</code></pre><ul><li>พิมพ์หัวข้อ REST API Project แบบหัวเรื่องระดับ 1 ในไฟล์ README.md ด้วย Tag ของ Markdown แล้ว Save</li></ul><pre><code># REST API Project</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.12.10.png" class="kg-image" alt loading="lazy" width="2000" height="1228" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-11.12.10.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-11.12.10.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-11.12.10.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-11.12.10.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>Commit เข้า Git ด้วยคำสั่งต่อไปนี้</li></ul><pre><code>git add .

git commit -m 'first commit'</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.13.28.png" class="kg-image" alt loading="lazy" width="1516" height="242" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-11.13.28.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-11.13.28.png 1000w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.13.28.png 1516w" sizes="(min-width: 720px) 720px"></figure><ul><li>Push Code ที่ Commit ขึ้น Github Server</li></ul><pre><code>git push origin main</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.14.18.png" class="kg-image" alt loading="lazy" width="1814" height="238" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-11.14.18.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-11.14.18.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-11.14.18.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.14.18.png 1814w" sizes="(min-width: 720px) 720px"></figure><p>สร้าง Short-Lived Branch ชื่อ feature/restapi-dev</p><pre><code>git checkout -b feature/restapi-dev</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.17.19.png" class="kg-image" alt loading="lazy" width="1818" height="158" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-11.17.19.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-11.17.19.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-11.17.19.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.17.19.png 1818w" sizes="(min-width: 720px) 720px"></figure><ul><li>สร้างไฟล์และ Folder ของ Project ตามโครงสร้างดังต่อไปนี้</li></ul><pre><code>.
├── .env
├── .gitignore
├── Dockerfile
├── README.md
├── docker-compose.yml
├── main.py
└── requirements.txt</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.32.46.png" class="kg-image" alt loading="lazy" width="2000" height="1231" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-11.32.46.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-11.32.46.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-11.32.46.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-11.32.46.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>แก้ไขไฟล์ docker-compose.yml</li></ul><figure class="kg-card kg-code-card"><pre><code>services:
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_HOST=host.docker.internal
      - DB_PORT=${DB_PORT:-5432}
      - API_TOKEN=${API_TOKEN}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: unless-stopped  # จะรีสตาร์ท container อัตโนมัติถ้า health check ไม่ผ่าน</code></pre><figcaption>docker-compose.yml</figcaption></figure><ul><li>แก้ไขไฟล์ .env</li></ul><figure class="kg-card kg-code-card"><pre><code># .env
API_PORT=8000
DB_USER=postgres
DB_PASSWORD=postgres123
DB_NAME=postgres
API_TOKEN=fjwfji3399</code></pre><figcaption>.env</figcaption></figure><ul><li>แก้ไขไฟล์ .gitignore</li></ul><figure class="kg-card kg-code-card"><pre><code># .gitignore
.env</code></pre><figcaption>.gitignore</figcaption></figure><ul><li>แก้ไขไฟล์ Dockerfile</li></ul><pre><code>FROM python:3.11-slim

WORKDIR /app

# ติดตั้ง system dependencies และ curl สำหรับ health check
RUN apt-get update &amp;&amp; apt-get install -y \
    gcc \
    libpq-dev \
    curl \
    &amp;&amp; rm -rf /var/lib/apt/lists/*

# คัดลอกไฟล์ requirements.txt
COPY requirements.txt .

# ติดตั้ง Python dependencies
RUN pip install --no-cache-dir -r requirements.txt

# คัดลอกโค้ดทั้งหมด
COPY . .

# แก้ปัญหา permission denied สำหรับ non-root user
RUN useradd -m myuser
RUN chown -R myuser:myuser /app
USER myuser

# รัน Flask ด้วย gunicorn
CMD ["gunicorn", "-b", "0.0.0.0:8000", "main:app", "--access-logfile", "-", "--error-logfile", "-"]</code></pre><ul><li>แก้ไข main.py</li></ul><pre><code>from flask import Flask, request, jsonify, abort
from flask_httpauth import HTTPTokenAuth
from flask_cors import CORS
import psycopg2
import psycopg2.extras
import os

# ดึงค่า config จาก environment variables
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_NAME = os.getenv("DB_NAME")
DB_HOST = os.getenv("DB_HOST", "localhost")  # ค่าเริ่มต้นคือ localhost
DB_PORT = os.getenv("DB_PORT", "5432")       # ค่าเริ่มต้นคือ 5432
API_TOKEN = os.getenv("API_TOKEN")

# สร้าง Flask app
app = Flask(__name__)

# ตั้งค่า CORS
CORS(app, resources={r"/api/v1/*": {"origins": "http://localhost:3000"}})

# สร้าง authentication instance
auth = HTTPTokenAuth(scheme='Bearer')

# ฟังก์ชันตรวจสอบ token
@auth.verify_token
def verify_token(token):
    return token == API_TOKEN

# ฟังก์ชันสำหรับเชื่อมต่อฐานข้อมูล
def get_db_connection():
    conn = psycopg2.connect(
        host=DB_HOST,
        port=DB_PORT,
        dbname=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD
    )
    return conn

# สร้าง API Blueprint สำหรับ version 1
from flask import Blueprint
api_v1 = Blueprint('api_v1', __name__, url_prefix='/api/v1')

# Routes ภายใต้ Blueprint api_v1
@api_v1.route('/users', methods=['GET'])
@auth.login_required
def get_users():
    """ดึงข้อมูลผู้ใช้ทั้งหมด"""
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    cursor.execute('SELECT * FROM users')
    users = cursor.fetchall()
    cursor.close()
    conn.close()
    users_list = [dict(user) for user in users]
    return jsonify(users_list)

@api_v1.route('/users/&lt;int:user_id&gt;', methods=['GET'])
@auth.login_required
def get_user(user_id):
    """ดึงข้อมูลผู้ใช้ตาม ID"""
    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
    user = cursor.fetchone()
    cursor.close()
    conn.close()
    if not user:
        abort(404, description="ไม่พบผู้ใช้")
    return jsonify(dict(user))

@api_v1.route('/users', methods=['POST'])
@auth.login_required
def create_user():
    """สร้างผู้ใช้ใหม่"""
    data = request.get_json()
    name = data.get('name')
    email = data.get('email')
    if not name or not email:
        return jsonify({'error': 'Name and email are required'}), 400

    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    try:
        cursor.execute(
            'INSERT INTO users (name, email) VALUES (%s, %s) RETURNING *',
            (name, email)
        )
        new_user = cursor.fetchone()
        conn.commit()
    except psycopg2.errors.UniqueViolation:
        conn.rollback()
        cursor.close()
        conn.close()
        return jsonify({'error': 'อีเมลนี้ถูกใช้งานแล้ว'}), 400
    except Exception as e:
        conn.rollback()
        cursor.close()
        conn.close()
        abort(500, description="เกิดข้อผิดพลาดภายในเซิร์ฟเวอร์")
    cursor.close()
    conn.close()
    return jsonify(dict(new_user)), 201

@api_v1.route('/users/&lt;int:user_id&gt;', methods=['PUT'])
@auth.login_required
def update_user(user_id):
    """อัพเดทข้อมูลผู้ใช้"""
    data = request.get_json()
    name = data.get('name')
    email = data.get('email')
    if not name or not email:
        return jsonify({'error': 'Name and email are required'}), 400

    conn = get_db_connection()
    cursor = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
    user = cursor.fetchone()
    if not user:
        cursor.close()
        conn.close()
        abort(404, description="ไม่พบผู้ใช้")

    try:
        cursor.execute(
            'UPDATE users SET name = %s, email = %s WHERE id = %s RETURNING *',
            (name, email, user_id)
        )
        updated_user = cursor.fetchone()
        conn.commit()
    except psycopg2.errors.UniqueViolation:
        conn.rollback()
        cursor.close()
        conn.close()
        return jsonify({'error': 'อีเมลนี้ถูกใช้งานแล้ว'}), 400
    except Exception as e:
        conn.rollback()
        cursor.close()
        conn.close()
        abort(500, description="ไม่สามารถอัพเดทข้อมูลได้")
    cursor.close()
    conn.close()
    return jsonify(dict(updated_user))

@api_v1.route('/users/&lt;int:user_id&gt;', methods=['DELETE'])
@auth.login_required
def delete_user(user_id):
    """ลบผู้ใช้"""
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE id = %s', (user_id,))
    user = cursor.fetchone()
    if not user:
        cursor.close()
        conn.close()
        abort(404, description="ไม่พบผู้ใช้")
    try:
        cursor.execute('DELETE FROM users WHERE id = %s', (user_id,))
        conn.commit()
    except Exception as e:
        conn.rollback()
        cursor.close()
        conn.close()
        abort(500, description="เกิดข้อผิดพลาดภายในเซิร์ฟเวอร์")
    cursor.close()
    conn.close()
    return jsonify({"message": "ลบผู้ใช้สำเร็จ"})

# Health check route ที่ระดับ root (นอก blueprint)
@app.route('/health', methods=['GET'])
def health_check():
    """ตรวจสอบสถานะของ API และการเชื่อมต่อฐานข้อมูล"""
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute('SELECT 1')
        cursor.fetchone()
        cursor.close()
        conn.close()
        return jsonify({"status": "healthy", "database": "connected"})
    except Exception:
        abort(503, description="Database connection failed")

# ลงทะเบียน Blueprint
app.register_blueprint(api_v1)</code></pre><p>แก้ไข requirement.txt</p><pre><code># requirements.txt

Flask==2.3.2
Flask-HTTPAuth==4.8.0
Flask-CORS==3.0.10
psycopg2-binary==2.9.7
python-dotenv==1.0.1
gunicorn==23.0.0</code></pre><p>ก่อน Commit Code เข้า Git นักพัฒนาต้องทดสอบก่อนว่ามันทำงานได้</p><ul><li>Deploy API</li></ul><pre><code>docker-compose up -d</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.39.40.png" class="kg-image" alt loading="lazy" width="2000" height="1231" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-11.39.40.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-11.39.40.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-11.39.40.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-11.39.40.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>ตรวจสอบ Container ที่ Deploy</li></ul><pre><code>docker-compose ps</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.40.17.png" class="kg-image" alt loading="lazy" width="2000" height="158" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-11.40.17.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-11.40.17.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-11.40.17.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.40.17.png 2250w" sizes="(min-width: 720px) 720px"></figure><ul><li>ดู Logs ของ Container ที่รัน</li></ul><pre><code>docker-compose logs</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.41.07.png" class="kg-image" alt loading="lazy" width="2000" height="289" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-11.41.07.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-11.41.07.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-11.41.07.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.41.07.png 2242w" sizes="(min-width: 720px) 720px"></figure><ul><li>ทดลองยิง API เส้น /health ผ่าน curl</li></ul><pre><code>curl http://localhost:8000/health</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.43.04-1.png" class="kg-image" alt loading="lazy" width="2000" height="143" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-11.43.04-1.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-11.43.04-1.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-11.43.04-1.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.43.04-1.png 2236w" sizes="(min-width: 720px) 720px"></figure><ul><li>ทดลองยิง API เส้น /health ผ่าน Postman</li></ul><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.45.04.png" class="kg-image" alt loading="lazy" width="2000" height="1228" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-11.45.04.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-11.45.04.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-11.45.04.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-11.45.04.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>ทดลองดึงข้อมูล users ทั้งหมดจาก Database ผ่าน Postman ด้วย Method GET (ต้องมี Bearer Token ใน Header)</li></ul><pre><code>http://localhost:8000/api/v1/users</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.48.04.png" class="kg-image" alt loading="lazy" width="2000" height="1483" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-11.48.04.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-11.48.04.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-11.48.04.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-11.48.04.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>ทดลองดึงข้อมูล users คนที่ 1 จาก Database ผ่าน Postman ด้วย Method GET (ต้องมี Bearer Token ใน Header)</li></ul><pre><code>http://localhost:8000/api/v1/users/1</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.49.22.png" class="kg-image" alt loading="lazy" width="2000" height="1483" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-11.49.22.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-11.49.22.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-11.49.22.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-11.49.22.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>ทดลองเพิ่ม users ใหม่ลง Database โดยรับข้อมูลแบบ JSON Format ผ่าน Postman ด้วย Method POST (ต้องมี Bearer Token ใน Header)</li></ul><pre><code>http://localhost:8000/api/v1/users</code></pre><figure class="kg-card kg-code-card"><pre><code>{
        "name": "apple",
        "email": "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e58495958980a58088848c89cb868a88">[email&#160;protected]</a>"
}</code></pre><figcaption>JSON Format</figcaption></figure><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-11.55.38.png" class="kg-image" alt loading="lazy" width="2000" height="1483" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-11.55.38.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-11.55.38.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-11.55.38.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-11.55.38.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>ทดลองแก้ไข Email ของ User คนที่ 1 เป็น <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="670912131306040f0813270f08130a060e0b4904080a">[email&#160;protected]</a> ผ่าน JSON Format ด้วย Method PUT (ต้องมี Bearer Token ใน Header)</li></ul><pre><code>http://localhost:8000/api/v1/users/1</code></pre><pre><code>{
        "name": "nuttachot promrit",
        "email": "<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e78992939386848f8893a78f88938a868e8bc984888a">[email&#160;protected]</a>"
}</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-12.01.01.png" class="kg-image" alt loading="lazy" width="2000" height="1483" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-12.01.01.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-12.01.01.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-12.01.01.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-12.01.01.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>ทดลองลบ User คนที่ 3 ด้วย Method DELETE (ต้องมี Bearer Token ใน Header)</li></ul><pre><code>http://localhost:8000/api/v1/users/3</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-12.03.47.png" class="kg-image" alt loading="lazy" width="2000" height="1483" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-12.03.47.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-12.03.47.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-12.03.47.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-12.03.47.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>เมื่อทดสอบการยิง API แต่ละเส้นแล้วจึง Commit Code เข้า Git ด้วยคำสั่งต่อไปนี้</li></ul><pre><code>git add .

git commit -m 'rest api dev'</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-12.31.12.png" class="kg-image" alt loading="lazy" width="2000" height="319" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-12.31.12.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-12.31.12.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-12.31.12.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-12.31.12.png 2246w" sizes="(min-width: 720px) 720px"></figure><p>ดู History ที่ Commit</p><pre><code>git log --oneline</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-12.32.05.png" class="kg-image" alt loading="lazy" width="2000" height="169" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-12.32.05.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-12.32.05.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-12.32.05.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-12.32.05.png 2248w" sizes="(min-width: 720px) 720px"></figure><p>Rebase โดยนำโค้ดใน Branch ของเรามา Update ให้ตรงกับ Trunk ล่าสุด</p><ul><li>แต่ก่อน Rebase ควรดึงการเปลี่ยนแปลงล่าสุดจาก Trunk เพื่อให้แน่ใจว่า Branch ของเราอยู่ในสถานะล่าสุด เหมือนบน Github Server</li></ul><pre><code>git checkout main

git pull origin main</code></pre><ul><li>Rebase เพื่อนำโค้ดใน Branch ของเรามา Update ให้ตรงกับ Trunk ล่าสุด</li></ul><pre><code>git checkout feature/restapi-dev

git rebase main</code></pre><ul><li>เมื่อ Code ใน Branch feature/restapi-dev ตรงกับ Trank ล่าสุดแล้ว จึง Merge กลับไปยัง Trunk (ถ้ามี Conflict ให้แก้ไข Conflict ก่อน Merge)</li></ul><pre><code>git checkout main
git merge feature/restapi-dev</code></pre><ul><li>Push Code ขึ้น Github Server</li></ul><pre><code>git push origin main</code></pre><ul><li>ลบ Branch ย่อยที่เสร็จแล้ว</li></ul><pre><code>git branch -d feature/restapi-dev</code></pre><ul><li>ดู History ทั้งหมด</li></ul><pre><code>git log --oneline</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-12.38.08.png" class="kg-image" alt loading="lazy" width="2000" height="196" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-12.38.08.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-12.38.08.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-12.38.08.png 1600w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-12.38.08.png 2244w" sizes="(min-width: 720px) 720px"></figure><h2 id="expose-api-%E0%B9%83%E0%B8%AB%E0%B9%89%E0%B9%80%E0%B8%82%E0%B9%89%E0%B8%B2%E0%B8%96%E0%B8%B6%E0%B8%87%E0%B8%88%E0%B8%B2%E0%B8%81-internet"><strong><strong><strong>Expose API ให้เข้าถึงจาก Internet</strong></strong></strong></h2><ul><li>ติดตั้ง Cloudflared</li></ul><pre><code>sudo apt update

sudo wget -O cloudflared https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64

sudo mv cloudflared /usr/local/bin/

sudo chmod +x /usr/local/bin/cloudflared

cloudflared --version

</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-12.42.58.png" class="kg-image" alt loading="lazy" width="2000" height="1066" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-12.42.58.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-12.42.58.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-12.42.58.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-12.42.58.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>สร้าง Cloudflare Tunnel</li></ul><pre><code>cloudflared tunnel --url http://0.0.0.0:8000</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-12.45.13.png" class="kg-image" alt loading="lazy" width="2000" height="1066" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-12.45.13.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-12.45.13.png 1000w, https://blog.pjjop.org/content/images/size/w1600/2024/11/Screenshot-2567-11-09-at-12.45.13.png 1600w, https://blog.pjjop.org/content/images/size/w2400/2024/11/Screenshot-2567-11-09-at-12.45.13.png 2400w" sizes="(min-width: 720px) 720px"></figure><ul><li>Copy URL ที่ได้นำไปเปิดบน Browser โดยเพิ่ม Path /health เช่น</li></ul><pre><code>https://creates-ignored-digest-filled.trycloudflare.com/health</code></pre><figure class="kg-card kg-image-card"><img src="https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-12.47.07.png" class="kg-image" alt loading="lazy" width="1468" height="1136" srcset="https://blog.pjjop.org/content/images/size/w600/2024/11/Screenshot-2567-11-09-at-12.47.07.png 600w, https://blog.pjjop.org/content/images/size/w1000/2024/11/Screenshot-2567-11-09-at-12.47.07.png 1000w, https://blog.pjjop.org/content/images/2024/11/Screenshot-2567-11-09-at-12.47.07.png 1468w" sizes="(min-width: 720px) 720px"></figure><p></p>
    </section>


</article>
</main>




            <aside class="read-more-wrap outer">
                <div class="read-more inner">
                        
<article class="post-card post">

    <a class="post-card-image-link" href="/payyaapradisth-chbabprabprung/">

        <img class="post-card-image"
            srcset="/content/images/size/w300/2025/07/321804365_204aa283-936a-4880-9f70-7a326c9a19c4-1.jpg 300w,
                    /content/images/size/w600/2025/07/321804365_204aa283-936a-4880-9f70-7a326c9a19c4-1.jpg 600w,
                    /content/images/size/w1000/2025/07/321804365_204aa283-936a-4880-9f70-7a326c9a19c4-1.jpg 1000w,
                    /content/images/size/w2000/2025/07/321804365_204aa283-936a-4880-9f70-7a326c9a19c4-1.jpg 2000w"
            sizes="(max-width: 1000px) 400px, 800px"
            src="/content/images/size/w600/2025/07/321804365_204aa283-936a-4880-9f70-7a326c9a19c4-1.jpg"
            alt="ปัญญาประดิษฐ์ (ฉบับปรับปรุง)"
            loading="lazy"
        />


    </a>

    <div class="post-card-content">

        <a class="post-card-content-link" href="/payyaapradisth-chbabprabprung/">
            <header class="post-card-header">
                <div class="post-card-tags">
                </div>
                <h2 class="post-card-title">
                    ปัญญาประดิษฐ์ (ฉบับปรับปรุง)
                </h2>
            </header>
                <div class="post-card-excerpt">บทความโดย ผศ.ดร.ณัฐโชติ พรหมฤทธิ์
ภาควิชาคอมพิวเตอร์
คณะวิทยาศาสตร์
มหาวิทยาลัยศิลปากร

คำอธิบายรายวิชา

แนวคิดปัญญาประดิษฐ์เบื้องต้น การแก้ปัญหาโดยใช้การค้นหาในปริภูมิสถานะ ประเภทของการเรียนรู้ของเครื่อง กระบวนการพัฒนาโมเดลด้วยการเรียนรู้ของเครื่อง วิศวกรรมคุณลักษณะสำหรับปัญญาประดิษฐ์</div>
        </a>

        <footer class="post-card-meta">
            <time class="post-card-meta-date" datetime="2025-07-24">Jul 24, 2025</time>
                <span class="post-card-meta-length">1 min read</span>
        </footer>

    </div>

</article>
                        
<article class="post-card post no-image">


    <div class="post-card-content">

        <a class="post-card-content-link" href="/auth-service-101/">
            <header class="post-card-header">
                <div class="post-card-tags">
                </div>
                <h2 class="post-card-title">
                    Auth Service 101
                </h2>
            </header>
                <div class="post-card-excerpt">บทความโดย มหาวิทยาลัยศิลปากรมหาวิทยาลัยศิลปากร

ภาควิชาคอมพิวเตอร์มหาวิทยาลัยศ

บทความโดย ผศ.ดร.ณัฐโชติ พรหมฤทธิ์ และ อ.ดร.สัจจาภรณ์ ไวจรรยา
ภาควิชาคอมพิวเตอร์
คณะวิทยาศาสตร์
มหาวิทยาลัยศิลปากร

บทความนี้ใช้สำหรับสอนนักศึกษาเกี่ยวกับการทำ JWT Authentication และการทำ Authorization ใน Auth Service</div>
        </a>

        <footer class="post-card-meta">
            <time class="post-card-meta-date" datetime="2025-02-05">Feb 5, 2025</time>
                <span class="post-card-meta-length">10 min read</span>
        </footer>

    </div>

</article>
                        
<article class="post-card post no-image">


    <div class="post-card-content">

        <a class="post-card-content-link" href="/api-documentation/">
            <header class="post-card-header">
                <div class="post-card-tags">
                </div>
                <h2 class="post-card-title">
                    API Documentation
                </h2>
            </header>
                <div class="post-card-excerpt">บทความโดย ผศ.ดร.ณัฐโชติ พรหมฤทธิ์ และ อ.ดร.สัจจาภรณ์ ไวจรรยา
ภาควิชาคอมพิวเตอร์
คณะวิทยาศาสตร์
มหาวิทยาลัยศิลปากร

การสร้าง API Document ใน Go สามารถทำได้โดยใช้เครื่องมือที่ช่วยในการสร้างเอกสาร เช่น Swaggo ซึ่งได้รับความนิยมในชุมชนชาว Go เนื่องจากใช้งานง่ายและสามารถสร้างเอกสารแบบ</div>
        </a>

        <footer class="post-card-meta">
            <time class="post-card-meta-date" datetime="2025-01-08">Jan 8, 2025</time>
                <span class="post-card-meta-length">5 min read</span>
        </footer>

    </div>

</article>
                </div>
            </aside>



    </div>

    <footer class="site-footer outer">
        <div class="inner">
            <section class="copyright"><a href="https://blog.pjjop.org">PJJOP</a> &copy; 2025</section>
            <nav class="site-footer-nav">
                
            </nav>
            <div class="gh-powered-by"><a href="https://ghost.org/" target="_blank" rel="noopener">Powered by Ghost</a></div>
        </div>
    </footer>

</div>


<script data-cfasync="false" src="/cdn-cgi/scripts/5c5dd728/cloudflare-static/email-decode.min.js"></script><script
    src="https://code.jquery.com/jquery-3.5.1.min.js"
    integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
    crossorigin="anonymous">
</script>
<script src="/assets/built/casper.js?v=08cea6c63b"></script>
<script>
$(document).ready(function () {
    // Mobile Menu Trigger
    $('.gh-burger').click(function () {
        $('body').toggleClass('gh-head-open');
    });
    // FitVids - Makes video embeds responsive
    $(".gh-content").fitVids();
});
</script>



<script defer src="https://static.cloudflareinsights.com/beacon.min.js/vcd15cbe7772f49c399c6a5babf22c1241717689176015" integrity="sha512-ZpsOmlRQV6y907TI0dKBHq9Md29nnaEIPlkf84rnaERnq6zvWvPUqr2ft8M1aS28oN72PdrCzSjY4U6VaAw1EQ==" data-cf-beacon='{"version":"2024.11.0","token":"bc67f7a334be4f91a0fc1c55935e8245","r":1,"server_timing":{"name":{"cfCacheStatus":true,"cfEdge":true,"cfExtPri":true,"cfL4":true,"cfOrigin":true,"cfSpeedBrain":true},"location_startswith":null}}' crossorigin="anonymous"></script>
</body>
</html>
